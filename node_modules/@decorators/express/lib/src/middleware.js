"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMiddlewareHandler = exports.ERROR_MIDDLEWARE = exports.middlewareHandler = void 0;
const di_1 = require("@decorators/di");
/**
 * Create request middleware handler that uses class or function provided as middleware
 */
function middlewareHandler(middleware) {
    return (req, res, next) => {
        invokeMiddleware(middleware, [req, res, next]).catch(next);
    };
}
exports.middlewareHandler = middlewareHandler;
/**
 * Error Middleware class registration DI token
 */
exports.ERROR_MIDDLEWARE = new di_1.InjectionToken('ERROR_MIDDLEWARE');
/**
 * Add error middleware to the app
 */
function errorMiddlewareHandler() {
    return (error, req, res, next) => {
        invokeMiddleware(exports.ERROR_MIDDLEWARE, [error, req, res, next]).catch(next);
    };
}
exports.errorMiddlewareHandler = errorMiddlewareHandler;
/**
 * Instantiate middleware and invoke it with arguments
 */
function invokeMiddleware(middleware, args) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const next = args[args.length - 1];
        try {
            let instance;
            if (typeof middleware === 'function') {
                if ((_a = middleware.prototype) === null || _a === void 0 ? void 0 : _a.use) {
                    instance = new middleware(...args);
                }
                else {
                    instance = middleware;
                }
            }
            else {
                instance = yield di_1.Container.get(middleware);
            }
            const handler = (_b = instance === null || instance === void 0 ? void 0 : instance.use) !== null && _b !== void 0 ? _b : instance;
            const result = typeof handler === 'function' ? handler.apply(instance, args) : instance;
            if (result instanceof Promise) {
                result.catch(next);
            }
        }
        catch (err) {
            next(err);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBLHVDQUEyRDtBQWdCM0Q7O0dBRUc7QUFDSCxTQUFnQixpQkFBaUIsQ0FBQyxVQUFzQjtJQUN0RCxPQUFPLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQixFQUFFLEVBQUU7UUFDekQsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBSkQsOENBSUM7QUFFRDs7R0FFRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsSUFBSSxtQkFBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdkU7O0dBRUc7QUFDSCxTQUFnQixzQkFBc0I7SUFDcEMsT0FBTyxDQUFDLEtBQVksRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtRQUN2RSxnQkFBZ0IsQ0FBQyx3QkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQztBQUNKLENBQUM7QUFKRCx3REFJQztBQUVEOztHQUVHO0FBQ0gsU0FBZSxnQkFBZ0IsQ0FDN0IsVUFBeUQsRUFDekQsSUFBMEU7OztRQUUxRSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQWlCLENBQUM7UUFFbkQsSUFBSTtZQUNGLElBQUksUUFBcUUsQ0FBQztZQUUxRSxJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVUsRUFBRTtnQkFDcEMsSUFBSSxNQUFBLFVBQVUsQ0FBQyxTQUFTLDBDQUFFLEdBQUcsRUFBRTtvQkFDN0IsUUFBUSxHQUFHLElBQUssVUFBMkQsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO2lCQUN0RjtxQkFBTTtvQkFDTCxRQUFRLEdBQUcsVUFBZ0MsQ0FBQztpQkFDN0M7YUFDRjtpQkFBTTtnQkFDTCxRQUFRLEdBQUcsTUFBTSxjQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzVDO1lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBQyxRQUFtRCxhQUFuRCxRQUFRLHVCQUFSLFFBQVEsQ0FBNkMsR0FBRyxtQ0FBSSxRQUFRLENBQUM7WUFDdEYsTUFBTSxNQUFNLEdBQUcsT0FBTyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBRXhGLElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtnQkFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtTQUNGO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDWDs7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24sIFJlcXVlc3RIYW5kbGVyLCBFcnJvclJlcXVlc3RIYW5kbGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBDb250YWluZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGRlY29yYXRvcnMvZGknO1xuXG5leHBvcnQgdHlwZSBUeXBlPEMgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3Q+ID0gbmV3ICguLi5hcmdzOiBhbnkpID0+IEM7XG5cbmV4cG9ydCB0eXBlIE1pZGRsZXdhcmVGdW5jdGlvbiA9IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4gdm9pZDtcbmV4cG9ydCBpbnRlcmZhY2UgTWlkZGxld2FyZUNsYXNzIHtcbiAgdXNlOiBNaWRkbGV3YXJlRnVuY3Rpb247XG59XG5leHBvcnQgdHlwZSBNaWRkbGV3YXJlID0gTWlkZGxld2FyZUZ1bmN0aW9uIHwgVHlwZTxNaWRkbGV3YXJlQ2xhc3M+O1xuXG5leHBvcnQgdHlwZSBFcnJvck1pZGRsZXdhcmVGdW5jdGlvbiA9IChlcnJvcjogRXJyb3IsIHJlcXVlc3Q6IFJlcXVlc3QsIHJlc3BvbnNlOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB2b2lkO1xuZXhwb3J0IGludGVyZmFjZSBFcnJvck1pZGRsZXdhcmVDbGFzcyB7XG4gIHVzZTogRXJyb3JNaWRkbGV3YXJlRnVuY3Rpb247XG59XG5leHBvcnQgdHlwZSBFcnJvck1pZGRsZXdhcmUgPSBFcnJvck1pZGRsZXdhcmVGdW5jdGlvbiB8IFR5cGU8RXJyb3JNaWRkbGV3YXJlQ2xhc3M+O1xuXG4vKipcbiAqIENyZWF0ZSByZXF1ZXN0IG1pZGRsZXdhcmUgaGFuZGxlciB0aGF0IHVzZXMgY2xhc3Mgb3IgZnVuY3Rpb24gcHJvdmlkZWQgYXMgbWlkZGxld2FyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZUhhbmRsZXIobWlkZGxld2FyZTogTWlkZGxld2FyZSk6IFJlcXVlc3RIYW5kbGVyIHtcbiAgcmV0dXJuIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgIGludm9rZU1pZGRsZXdhcmUobWlkZGxld2FyZSwgW3JlcSwgcmVzLCBuZXh0XSkuY2F0Y2gobmV4dCk7XG4gIH07XG59XG5cbi8qKlxuICogRXJyb3IgTWlkZGxld2FyZSBjbGFzcyByZWdpc3RyYXRpb24gREkgdG9rZW5cbiAqL1xuZXhwb3J0IGNvbnN0IEVSUk9SX01JRERMRVdBUkUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0VSUk9SX01JRERMRVdBUkUnKTtcblxuLyoqXG4gKiBBZGQgZXJyb3IgbWlkZGxld2FyZSB0byB0aGUgYXBwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvck1pZGRsZXdhcmVIYW5kbGVyKCk6IEVycm9yUmVxdWVzdEhhbmRsZXIge1xuICByZXR1cm4gKGVycm9yOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICBpbnZva2VNaWRkbGV3YXJlKEVSUk9SX01JRERMRVdBUkUsIFtlcnJvciwgcmVxLCByZXMsIG5leHRdKS5jYXRjaChuZXh0KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBJbnN0YW50aWF0ZSBtaWRkbGV3YXJlIGFuZCBpbnZva2UgaXQgd2l0aCBhcmd1bWVudHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW52b2tlTWlkZGxld2FyZShcbiAgbWlkZGxld2FyZTogSW5qZWN0aW9uVG9rZW4gfCBNaWRkbGV3YXJlIHwgRXJyb3JNaWRkbGV3YXJlLFxuICBhcmdzOiBQYXJhbWV0ZXJzPE1pZGRsZXdhcmVGdW5jdGlvbj4gfCBQYXJhbWV0ZXJzPEVycm9yTWlkZGxld2FyZUZ1bmN0aW9uPixcbikge1xuICBjb25zdCBuZXh0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdIGFzIE5leHRGdW5jdGlvbjtcblxuICB0cnkge1xuICAgIGxldCBpbnN0YW5jZTogTWlkZGxld2FyZUNsYXNzIHwgRXJyb3JNaWRkbGV3YXJlQ2xhc3MgfCBNaWRkbGV3YXJlRnVuY3Rpb247XG5cbiAgICBpZiAodHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChtaWRkbGV3YXJlLnByb3RvdHlwZT8udXNlKSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IChtaWRkbGV3YXJlIGFzIFR5cGU8TWlkZGxld2FyZUNsYXNzIHwgRXJyb3JNaWRkbGV3YXJlQ2xhc3M+KSguLi5hcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlID0gbWlkZGxld2FyZSBhcyBNaWRkbGV3YXJlRnVuY3Rpb247XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gYXdhaXQgQ29udGFpbmVyLmdldChtaWRkbGV3YXJlKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0gKGluc3RhbmNlIGFzIE1pZGRsZXdhcmVDbGFzcyB8IEVycm9yTWlkZGxld2FyZUNsYXNzKT8udXNlID8/IGluc3RhbmNlO1xuICAgIGNvbnN0IHJlc3VsdCA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nID8gaGFuZGxlci5hcHBseShpbnN0YW5jZSwgYXJncykgOiBpbnN0YW5jZTtcblxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICByZXN1bHQuY2F0Y2gobmV4dCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBuZXh0KGVycik7XG4gIH1cbn1cbiJdfQ==