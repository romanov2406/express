"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const store_1 = require("./store");
const errors_1 = require("./errors");
class Container {
    /**
     * Register new or replace providers
     */
    static provide(providers) {
        providers.forEach(provider => {
            if (provider.useClass) {
                return this.registerClassProvider(provider);
            }
            if (provider.useFactory) {
                return this.registerFactoryProvider(provider);
            }
            if (provider.useValue) {
                return this.registerValueProvider(provider);
            }
        });
    }
    /**
     * Get instance of injectable
     */
    static get(injectable) {
        const provider = store_1.Store.findProvider(injectable);
        if (!provider) {
            throw new errors_1.MissingProviderError(injectable);
        }
        return this.resolveProvider(provider);
    }
    /**
     * Resolve provider
     */
    static resolveProvider(provider, requesters = []) {
        return __awaiter(this, void 0, void 0, function* () {
            if (provider.value) {
                return provider.value;
            }
            const _requesters = requesters.concat([provider]);
            const deps = provider.deps.map((dep) => {
                const requesterProvider = _requesters.find((requester) => requester.id === dep.id);
                if (requesterProvider) {
                    throw new errors_1.RecursiveProviderError(_requesters, requesterProvider);
                }
                const depService = store_1.Store.findProvider(dep.id);
                if (!depService && !dep.optional) {
                    throw new errors_1.MissingProviderError(provider, dep);
                }
                if (!depService && dep.optional) {
                    return null;
                }
                return this.resolveProvider(depService, _requesters);
            });
            const resolvedDeps = yield Promise.all(deps);
            return provider.factory ? provider.factory(...resolvedDeps) : new provider.type(...resolvedDeps);
        });
    }
    /**
     * Register class provider
     */
    static registerClassProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const classProvider = store_1.Store.findProvider(provider.useClass);
        const deps = classProvider ? classProvider.deps : (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, deps, type: provider.useClass });
    }
    /**
     * Register factory provider
     */
    static registerFactoryProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const factory = provider.useFactory;
        const deps = (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, factory, deps });
    }
    /**
     * Register value provider
     */
    static registerValueProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const value = provider.useValue;
        store_1.Store.replaceProvider(provider.provide, { id, value });
    }
}
exports.Container = Container;
//# sourceMappingURL=data:application/json;base64,