"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = void 0;
const reflector_1 = require("./reflector");
const injection_token_1 = require("./injection-token");
class Store {
    /**
     * Get provider id
     */
    static providerId(injectable) {
        if (!injectable) {
            return null;
        }
        if (typeof injectable === 'string' || injectable instanceof injection_token_1.InjectionToken) {
            return injectable;
        }
        return reflector_1.Reflector.getId(injectable);
    }
    /**
     * Register provider
     */
    static provider(type, args) {
        let provider = this.findProvider(type);
        if (provider === undefined) {
            provider = this.createProvider(type);
        }
        if (args === undefined) {
            reflector_1.Reflector.paramTypes(type)
                .forEach((param, index) => {
                if (!provider.deps[index] || !provider.deps[index].id) {
                    provider.deps[index] = { id: this.providerId(param) };
                }
            });
            return type;
        }
        const dep = provider.deps[args.index] || { id: null };
        provider.deps[args.index] = {
            id: args.injectable ? this.providerId(args.injectable) : dep.id,
            optional: args.optional || dep.optional,
        };
        return type;
    }
    /**
     * Find stored provider
     */
    static findProvider(injectable) {
        const id = this.providerId(injectable);
        return this.providers.find((provider) => provider.id === id);
    }
    /**
     * Replace stored provider wiht new provider
     */
    static replaceProvider(injectable, provider) {
        const storeProvider = this.findProvider(injectable);
        const index = this.providers.indexOf(storeProvider);
        if (index !== -1) {
            this.providers[index] = provider;
        }
        else {
            this.providers.push(provider);
        }
    }
    /**
     * Create and store provider
     */
    static createProvider(type) {
        const id = reflector_1.Reflector.setId(type);
        const storeProvider = { id, type, deps: [] };
        this.providers.push(storeProvider);
        return storeProvider;
    }
}
exports.Store = Store;
Store.providers = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQXdDO0FBQ3hDLHVEQUFtRDtBQUVuRCxNQUFhLEtBQUs7SUFHaEI7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQXNCO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxZQUFZLGdDQUFjLEVBQUU7WUFDMUUsT0FBTyxVQUFVLENBQUM7U0FDbkI7UUFFRCxPQUFPLHFCQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVSxFQUFFLElBQXVFO1FBQ2pHLElBQUksUUFBUSxHQUFrQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN0QixxQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7aUJBQ3ZCLE9BQU8sQ0FBQyxDQUFDLEtBQWlCLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ3JELFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2lCQUN2RDtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUwsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sR0FBRyxHQUFlLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO1FBRWxFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHO1lBQzFCLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0QsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLFFBQVE7U0FDeEMsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFzQjtRQUN4QyxNQUFNLEVBQUUsR0FBaUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVyRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBdUIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsUUFBdUI7UUFDcEUsTUFBTSxhQUFhLEdBQWtCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFNUQsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDbEM7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBQ3RDLE1BQU0sRUFBRSxHQUFpQixxQkFBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBa0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUU1RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVuQyxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDOztBQWxGSCxzQkFvRkM7QUFuRlEsZUFBUyxHQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZVByb3ZpZGVyLCBUeXBlLCBJbmplY3RhYmxlLCBJbmplY3RhYmxlSWQsIERlcGVuZGVuY3kgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFJlZmxlY3RvciB9IGZyb20gJy4vcmVmbGVjdG9yJztcbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnLi9pbmplY3Rpb24tdG9rZW4nO1xuXG5leHBvcnQgY2xhc3MgU3RvcmUge1xuICBzdGF0aWMgcHJvdmlkZXJzOiBTdG9yZVByb3ZpZGVyW10gPSBbXTtcblxuICAvKipcbiAgICogR2V0IHByb3ZpZGVyIGlkXG4gICAqL1xuICBzdGF0aWMgcHJvdmlkZXJJZChpbmplY3RhYmxlOiBJbmplY3RhYmxlKTogSW5qZWN0YWJsZUlkIHtcbiAgICBpZiAoIWluamVjdGFibGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5qZWN0YWJsZSA9PT0gJ3N0cmluZycgfHwgaW5qZWN0YWJsZSBpbnN0YW5jZW9mIEluamVjdGlvblRva2VuKSB7XG4gICAgICByZXR1cm4gaW5qZWN0YWJsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVmbGVjdG9yLmdldElkKGluamVjdGFibGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHByb3ZpZGVyXG4gICAqL1xuICBzdGF0aWMgcHJvdmlkZXIodHlwZTogVHlwZSwgYXJncz86IHsgaW5qZWN0YWJsZT86IEluamVjdGFibGUsIG9wdGlvbmFsPzogYm9vbGVhbjsgaW5kZXg/OiBudW1iZXI7IH0pOiBUeXBlIHtcbiAgICBsZXQgcHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPSB0aGlzLmZpbmRQcm92aWRlcih0eXBlKTtcblxuICAgIGlmIChwcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm92aWRlciA9IHRoaXMuY3JlYXRlUHJvdmlkZXIodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgUmVmbGVjdG9yLnBhcmFtVHlwZXModHlwZSlcbiAgICAgICAgLmZvckVhY2goKHBhcmFtOiBJbmplY3RhYmxlLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFwcm92aWRlci5kZXBzW2luZGV4XSB8fCAhcHJvdmlkZXIuZGVwc1tpbmRleF0uaWQpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmRlcHNbaW5kZXhdID0geyBpZDogdGhpcy5wcm92aWRlcklkKHBhcmFtKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcDogRGVwZW5kZW5jeSA9IHByb3ZpZGVyLmRlcHNbYXJncy5pbmRleF0gfHwgeyBpZDogbnVsbCB9O1xuXG4gICAgcHJvdmlkZXIuZGVwc1thcmdzLmluZGV4XSA9IHtcbiAgICAgIGlkOiBhcmdzLmluamVjdGFibGUgPyB0aGlzLnByb3ZpZGVySWQoYXJncy5pbmplY3RhYmxlKSA6IGRlcC5pZCxcbiAgICAgIG9wdGlvbmFsOiBhcmdzLm9wdGlvbmFsIHx8IGRlcC5vcHRpb25hbCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBzdG9yZWQgcHJvdmlkZXJcbiAgICovXG4gIHN0YXRpYyBmaW5kUHJvdmlkZXIoaW5qZWN0YWJsZTogSW5qZWN0YWJsZSk6IFN0b3JlUHJvdmlkZXIge1xuICAgIGNvbnN0IGlkOiBJbmplY3RhYmxlSWQgPSB0aGlzLnByb3ZpZGVySWQoaW5qZWN0YWJsZSk7XG5cbiAgICByZXR1cm4gdGhpcy5wcm92aWRlcnMuZmluZCgocHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIpID0+IHByb3ZpZGVyLmlkID09PSBpZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSBzdG9yZWQgcHJvdmlkZXIgd2lodCBuZXcgcHJvdmlkZXJcbiAgICovXG4gIHN0YXRpYyByZXBsYWNlUHJvdmlkZXIoaW5qZWN0YWJsZTogSW5qZWN0YWJsZSwgcHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzdG9yZVByb3ZpZGVyOiBTdG9yZVByb3ZpZGVyID0gdGhpcy5maW5kUHJvdmlkZXIoaW5qZWN0YWJsZSk7XG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMucHJvdmlkZXJzLmluZGV4T2Yoc3RvcmVQcm92aWRlcik7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyc1tpbmRleF0gPSBwcm92aWRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgc3RvcmUgcHJvdmlkZXJcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZVByb3ZpZGVyKHR5cGU6IFR5cGUpOiBTdG9yZVByb3ZpZGVyIHtcbiAgICBjb25zdCBpZDogSW5qZWN0YWJsZUlkID0gUmVmbGVjdG9yLnNldElkKHR5cGUpO1xuICAgIGNvbnN0IHN0b3JlUHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPSB7IGlkLCB0eXBlLCBkZXBzOiBbXSB9O1xuXG4gICAgdGhpcy5wcm92aWRlcnMucHVzaChzdG9yZVByb3ZpZGVyKTtcblxuICAgIHJldHVybiBzdG9yZVByb3ZpZGVyO1xuICB9XG5cbn1cbiJdfQ==