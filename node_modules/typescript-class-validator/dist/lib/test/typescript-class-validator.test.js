var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "class-validator", "../src/typescript-class-validator", "../src/lib"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const class_validator_1 = require("class-validator");
    const typescript_class_validator_1 = require("../src/typescript-class-validator");
    const lib_1 = require("../src/lib");
    class BodyDto {
    }
    __decorate([
        class_validator_1.IsEmail(),
        __metadata("design:type", String)
    ], BodyDto.prototype, "name", void 0);
    describe('Validate param tests', () => {
        it('should selected nested property', () => {
            const data = {
                body: {
                    item: {
                        name: 'Danny'
                    }
                }
            };
            const response = lib_1.getNestedObjectProperty(data, 'body.item.name');
            expect(response).toEqual('Danny');
        });
        it('should return undefined property on non existent path', () => {
            const data = {};
            const response = lib_1.getNestedObjectProperty(data, 'body.item.name');
            expect(response).toBeUndefined();
        });
        it('should return item on first level', () => {
            const data = {
                body: {
                    name: 'Danny'
                }
            };
            const response = lib_1.getNestedObjectProperty(data, 'body');
            expect(response.name).toEqual('Danny');
        });
        it('should return validation errors', () => {
            const response = lib_1.getValidationErrors(BodyDto, {
                name: 'sds'
            });
            expect(response.length).toEqual(1);
            const { target, property, constraints } = response[0];
            expect(target).toEqual({ name: 'sds' });
            expect(property).toEqual('name');
            expect(constraints.isEmail).toEqual('name must be an email');
        });
        it('should not return validation errors', () => {
            const response = lib_1.getValidationErrors(BodyDto, {
                name: 'sds@dasdas.com'
            });
            expect(response.length).toEqual(0);
        });
        it('should validate inferred ts type and throw', () => {
            class TestClass {
                method(body) {
                    return 123;
                }
            }
            __decorate([
                typescript_class_validator_1.Validate(),
                __param(0, typescript_class_validator_1.Validator()),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", [BodyDto]),
                __metadata("design:returntype", void 0)
            ], TestClass.prototype, "method", null);
            const instance = new TestClass();
            try {
                instance.method({
                    name: 'asdas'
                });
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
                expect(e.validationErrors[0].constraints.isEmail).toEqual('name must be an email');
            }
        });
        it('should validate specific validator type and key and fail', () => {
            class TestClass {
                method(body) {
                    return 123;
                }
            }
            __decorate([
                typescript_class_validator_1.Validate(),
                __param(0, typescript_class_validator_1.Validator(BodyDto, 'body')),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", [Object]),
                __metadata("design:returntype", void 0)
            ], TestClass.prototype, "method", null);
            const instance = new TestClass();
            try {
                const response = instance.method({
                    name: 'asdas'
                });
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
                expect(e.validationErrors[0].constraints.isDefined).toEqual('property body is missing');
            }
        });
        it('should validate specific validator type and key and succeed', () => {
            class TestClass {
                method(req) {
                    return 123;
                }
            }
            __decorate([
                typescript_class_validator_1.Validate(),
                __param(0, typescript_class_validator_1.Validator(BodyDto, 'body')),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", [Object]),
                __metadata("design:returntype", void 0)
            ], TestClass.prototype, "method", null);
            const instance = new TestClass();
            try {
                const response = instance.method({
                    body: {
                        name: 'asdas@gmail.com'
                    }
                });
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
            }
        });
        it('should validate array types', () => {
            class TestClass {
                method(body) {
                    return 123;
                }
            }
            __decorate([
                typescript_class_validator_1.Validate(),
                __param(0, typescript_class_validator_1.Validator(BodyDto)),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", [Array]),
                __metadata("design:returntype", void 0)
            ], TestClass.prototype, "method", null);
            const instance = new TestClass();
            try {
                const response = instance.method([
                    {
                        name: 'asdas@gmail.com'
                    }
                ]);
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
            }
            try {
                instance.method([
                    {
                        name: 'asdasm'
                    }
                ]);
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
                expect(e.validationErrors[0].constraints.isEmail).toEqual('name must be an email');
            }
            try {
                instance.method({
                    name: 'asdasm'
                });
            }
            catch (e) {
                expect(e.message).toBe('Validation Error');
                expect(e.validationErrors.length).toEqual(1);
                expect(e.validationErrors[0].constraints.isArray).toEqual('input param must be array');
            }
        });
    });
});
//# sourceMappingURL=typescript-class-validator.test.js.map