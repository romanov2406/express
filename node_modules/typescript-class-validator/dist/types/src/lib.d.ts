import { ValidationError, ValidatorOptions } from "class-validator";
import "reflect-metadata";
export declare class ValidatorError extends Error {
    validationErrors: ValidationError[];
    constructor(validationErrors: ValidationError[]);
}
export declare function Validate(validatorOptions?: ValidatorOptions): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
/**
 * When provided the validatorClass validation will be performed on the provided key or root object
 * instead of argument itself. useful for when the validator data is located in a nested object.
 *
 * @param validatorClass - the validator class to use instead of the inferred ts type
 * @param targetKey -
 * @returns {(target: any, key: string, index) => void}
 */
export declare function Validator(validatorClass?: any, targetKey?: string): (target: any, key: string, index: number) => void;
export declare function getValidationErrors(validatorClass: any, val: any, validatorOptions?: ValidatorOptions): ValidationError[];
export declare function getNestedObjectProperty(object: any, path: string): any;
